* DONE Сделано
** DONE сделать выполнение команд шагового двигателя/*{{{*/
*** DONE терменю cодержит команду/*{{{*/
**** DONE написать энум  моторов
**** DONE добавить в дерево инпута
***** step 1 1000
 SM_STEP
***** sspeed 1 50
 SM_SPEED
***** senab 1 1
 SM_ENABLE
***** sdir 1 1
 SM_DIR
	 /*}}}*/
 /*}}}*/
**** DONE написать класс  моторов
	 инициализирован указатель на спиай
	 мотор принимает номер из энума
			 и значение
	 посути команды отличаются только кодом команды
**** DONE добавить  в хелп
**** DONE масив соотношения моторов и ного направления и удержания 
***** DONE добавиь в енум кортедж( таг, enbl pin, dir pin)
***** DONE периписать команда лида для включения выключения сдиговых пинов
***** DONE переписать команды под 8 бит
*** DONE стм понимает команду/*{{{*/
**** DONE класс степ мотора/*{{{*/ 
***** DONE сделать тест класс
		 открыть инстрекцию создания нового тест коза
		 сделать прототип
			 взать за основу 
***** DONE должен содержать /*{{{*/
	 скорость
	 переменую шагов
	 проверка на енабл
	 ______________________
	 рантайм()
	 шаг()
	 Сет_Енабл()
	 Установить Скорость()
	 /*}}}*/
 /*}}}*/
**** DONE масив моторов
 /*}}}*/
**** DONE Рантайм моторов
	 цикл пробигается по мосиву моторов
	 у каждого вызывает рантайм
**** DONE SM_STEP
	 входит в свитч
	 первый параметр указывает на номер мотора в арее
	 второй передаётся соответстуюшиму методу обекта
**** DONE SM_SPEED
**** DONE залить в СТМ 
**** DONE залить в РПй 
***** подключить розбкри
***** открыть фаил розбери
***** приконктится 
***** перейти загрузить с гита
***** запустить
**** DONE Убедится в работо-способности 
***** запустить терменал СТМ32
***** если не вепоняются команды меню залисть с дебагом
** DONE Подченить Тесты RPi 
*** DONE Степ мотора
*** DONE Терменю
** DONE Двинуть гит мастера на эту сборку 
** DONE обнулить стм шифт аут при включениеии
** DONE В стм степ мотор заменить млесекунды на микросекунды
** DONE добавиь в степ клас счеталку шагов
*** переменная положениея
** DONE запустить рабочий процес
*** DONE заработать слобер
**** DONE тесты работают прошлые
**** DONE перенести изменения
**** DONE прогнатеть тесты 
**** DONE добавить необходимое
** DONE печатать по достижение дон если дебаг
*** DONE Доне обрабатывается одноразова
*** DONE перенести в основеной проект
*** DONE внести измения в ино
** DONE добавить Длину сигнал
*** DONE переменная проверки на наличие длины
**** DONE деф модуль вкл или выкл
**** 
** DONE Степ мотор
*** DONE класс двух направленый
**** DONE создать ппроект Слобере
**** DONE скопировать степ мотор
**** DONE добавить Тригировку
***** переменая состояня
***** реалтайм включает состоняие
***** резет черерез состояние
*** DONE проверить в Протеусе
**** DONE написать отдельный модуль
**** DONE шлет 800 отдыхает 1 сек
**** DONE скомпильт в ардуину уно
**** DONE собрать модуль в протеусе
***** добавить осцелограв
***** вывод на диоды
**** DONE протестить
** DONE стм отрабатывает концевики/*{{{*/
*** DONE написать абсолютные команды для РПй
**** DONE Мувту
**** DONE Маинтенс 
*** DONE Новые тесты в слобере
*** DONE добавить в клас мотора
**** для каждого мотора
***** дир состояние для движения от нуля
***** номер пина в номере ареев шифти-оута отвечаюших за дир
***** номер пина в номере ареев шифти-оута отвечаюших за енабле
***** номер пина в номере ареев шифти-ина отвечаюших за концевик0
***** переменая позиции
****** определаеся на основе состояни движения
****** значит два отдельных метода движения
******* к 0
******* от 0
***** последняя ошибка шагов
**** арей класс шифт-ина
***** метод инита регистра ( 4 пина )
***** метод считования 8 бит
**** метод асинхроной проверки пересечения нуля
***** метод движениея с проверкой 
	   вернуть переменую
***** рутина обнуления при пересечении нуля
**** нулевое направление определяет направление на концевик
**** метод обнуления переменой 
 двигатся к нулю проверя прерывание
  каждый шаг
  по достижении обнулить
***** переменую метки нуля
****** и переменую команд с обнуления
****** и переменую проверки движения к обнулению
***** запомнить разницу между шагом и нулём
****** ошибка = шаг
**** метод движения по координате
***** умеет задавать направление
****** направление определяется
******* если координат
******** больше - то переменая дира
******** меньше - то обратная переменая дира
***** умеет в рантайм добовлять необходимость проверки концевика
****** прм приближении провереять каждые 1000 - 100 -10 -1 шаг
  /*}}}*/
**** метод найти заданный класс среди шифтов
***** если понадобится может быть вожнее добовлять их вручную и орентироватся по номерам вручную
**** DONE класс степ моотора
***** содержит масив
****** +содержит только по одному указателю на
******* шифт ин
******* шифт аут
******* калас передачи обратных сообшений
*** DONE отрботка команд СТМ
**** Мувту
**** Маинтенс 
*** Получать даные
**** генерация сообшений
**** запрос данных 
***** положения
***** размера последней ошибки
***** шагов с последнего обсулживания
*** DONE залить в СТМ 
*** DONE залить в РПй 
**** подключить розбкри
**** открыть фаил розбери
**** приконктится 
**** перейти загрузить с гита
**** запустить
*** DONE Убедится в работо-способности 
**** запустить терменал СТМ32
**** если не вепоняются команды меню залисть с дебагом
*** DONE Залить в гит последнюю версию
** DONE Потесить диодный сдвиговый регистр 
*** на основе бумажки
*** написать прогу
**** тест по циклу
***** перебираем 0-32
      выводим на каждом кратном 8
***** от 0 99999 в сенд16 
* TODO Encоder 
** создать Новые тесты
** СТМ32
*** Основной модуль
**** оброботак команд
***** старт рутины енкодера
***** Стоп рутины  
**** добавить два интерепат для энкодера 
*** класс екодерАналайзер
**** методы
***** DONE метод инициализации
****** принять параметрами
******* енкодер
******* спай
******* пос степ мотор
******* Осноыной цикл Луп 
***** DONE Старт 
      если переменая активно выйти или если переменая остоновки активна выйти
      если нет активировать
      старт скрипт снятия даных
***** TODO перемешение по оси х к лезвию
***** TODO остановить перемешение по оси х 
***** TODO перемешение по оси х к старту\рукоядке
      переменая движения к Началy активна 
      точка старта не достигнута 
      если достигнута 
      отключить движение к началу
      включить цикл снятия даных
***** TODO перемешение по оси z к верху
***** TODO остановить перемешение по оси z 
***** TODO перемешение по оси z к низу
      отключить движение к началу
      включить цикл снятия даных
***** проверка наличия значимых изменени
***** проверка наличия ножа
      енкодер не в нулевом нажатии
      если ноль 
то передать даные
стоп
***** метод компенcации 
      проверка необходимости действий
елси нет - выходим
      проверяем что с последней отсылки даных перемыные (енкодера и шагов) ниже значемого порога
      вариант формируем передачу обнуляем переменые
      шлем стоп оси х
      если енкодер не донажат дожимаем путем поднятия каретки вверх
      если енкодер пережат ослобляем нажатие путем опускани каретки вниз
      шлем старт оси х на максимальное значение
***** Передача данных
      формируем передачу обнуляем переменые
      создаём запись (координат х : координата z : положение енкодера)
***** скрипт снятия даных
****** Перемешаемся в концевую точку 
       задаём движение в сторону точки старта
       вызываем ожидание пока не получим подтвержедение что положение достигнуто
****** подымаемся в верх пока не обнаружим ножь
       подымаем екодер на положениеу нажатого состояни
       нормализум степень шажатия
       задаём максимальное положение и  
 ждем пока либо недостигнуто максимальное положение
 либо енкодер не достиг нужной степени нажима
****** отсылаем стартовую точку
       формируем передачу обнуляем переменые
****** выполняем медод нормализации положения екодера относително ножа
       проверяем что с последней отсылки даных перемыные (енкодера и шагов) ниже значемого порога
       вариант формируем передачу обнуляем переменые
       если енкодер не донажат дожимаем путем поднятия каретки вверх
       если енкодер пережат ослобляем нажатие путем опускани каретки вниз
******* запоминаем последнюю степень нажатия
****** цикл обработки формы от рукоядке
******* проверяем на запуск останоки
 если остановлен выходим из цикла
******* если значение екодера сместилось
	устанавливаем движение к координате максимума 
	= последнее - текушее
	проверяем на значительность смешения на шагов
 не значительно и проверка на заверешение фалзе продолжаем ожидания не делая нечего 
 значительно создаём запись (координат х : координата z : положение енкодера)
******* проверяем в норме ли полжение екодера
******* Проверка достигнут ли начало ножа
	если достигнута
	отправляем послдений покет данных
  выходим из енкодера (стоп)
******* (ждем шага)
******* повторяем цикл
****** перед каждым пунктор проверяем на запуск останоку
если остановлен выходим из цикла
***** TODO Стоп
      выключить активность
      включить переменую завершения
      отправить на 0
***** TODO Ожидание
****** пример
void (*functionPointer)(void);

void setup() {
  Serial.begin(115200);
  functionPointer = &testFunction;
}

void loop() {
  functionPointer();
}

void testFunction(){
  Serial.println("TEST!!");
}
фукчия запускает основной луп
****** тейпдеф
typedef void (*GeneralMessageFunction) ();

void sayHello ()
  {
  Serial.println ("Hello!");  
  }  // end of sayHello

void sayGoodbye ()
  {
  Serial.println ("Goodbye!");  
  }  // end of sayGoodbye

void checkPin (const int pin, GeneralMessageFunction response); // prototype

void checkPin (const int pin, GeneralMessageFunction response)
  {
  if (digitalRead (pin) == LOW)
     {
     response ();  // call the callback function
     delay (500);  // debounce
     }
  }  // end of checkPin
  
void setup ()
  {
  Serial.begin (115200);
  Serial.println ();
  pinMode (8, INPUT_PULLUP);
  pinMode (9, INPUT_PULLUP);
  }  // end of setup

void loop ()
  {
  checkPin (8, sayHello);    
  checkPin (9, sayGoodbye);
  }  // end of loop
****** (параметр ожиданиея в микросекундах Лонг)
       переменая ожидагия проверяется и невыходит из ожидания пока микросекунды не будут равны переменой
****** (параметр ожиданиея в милисекундах Инт)
       переменая ожидагия проверяется и невыходит из ожидания пока милисекунды не будут равны переменой
***** TODO екодер остановлен?
****** проверяем переменая енкодера активна ли 
       если да - выходи - возврашая фалзе
       если нет
       устанавливаем двигатся к нулю
	устанавливаем завершение - труе
	если положение 0 - выстравлям завершение на фалzе
	сообшить о завершениии екодера розбери
       возврашаем труе
**** константы
***** стартовая высота
****** х 
положение откуда начинаем искать ножь
****** у
       среднее положение на котором нужно держать енкодер
****** z
       положение откоторого начиаем искать ножь
***** конечно\максимальное положение 
****** х
****** у
****** z
***** нормальное степень нажатия енкодeра 
     (максимальное) положение нажатия энкодера 
      (менимальное) положение нажатия 
в этих положения енкодер должен нормализовать себя
      (средне) в которое энекодер должен себя привести
***** значение значительности изменения екодера
***** значение значительности изменения шагов
***** координате старта ножа\начала рукоядки
**** Переменные
***** с последних даных
****** положение енкодера
****** шагов
***** енкодер начат
***** енкодер заканчивается
**** архив
***** Цикл проверки рутины энкодера
***** цикл нахождения начала ножа
***** цикл обработки формы к острею 
***** передача даных о нахождение конца ножа
***** Движение к началу
***** старт основного цикла
***** переменую завершения
***** подымаемся в верх пока не обнаружим ножь
      если достигнута заданая высота а екодер не сместился 
опускаемся на стартовую высоту
и сдвигаемя на сантиметр к рукоядке
повторяем 
***** помечаем данную точку как точку начала ножа
      подымаем екодер на положениеу нажатого состояни
*****  смешать при откланение выше задоного значания по оси у
***** сдивигатся по оси х пока неслучится изменение
****** изменени запомнить 
****** по определёным условиям отправить на РПй

***** рантайм
****** проверить включин ли энкодер выйти если выключен
****** перемешение к старту
****** Основной цикл
** РосбеоиПай
*** Добавить команды
**** команда начала считывания данных
**** отрабатывание построенного маршрута
*** Сообшение 
**** Полученны данне екодера
**** закончена работа егкодера
** Интегральное
* улудшить команду шагового двигателя 
** запоминает и выводит постледий  ввод  
** как передовать байты выше 16ти
* сделать LED меню
** ТЗ меню
*** Пункт меню должно уметь
**** содержит переменую состояния 
**** выполнять сценарий при исполнение
**** способен хрянить некий сценарий который должен выполнятся постоянноё
**** попробывать передовать селф на меню и пусть делает всё через меню
*** Меню должно уметь
**** переключатся на следуший пункт из списка
***** проверить не изменилась ли переменая активного меню
***** если изменилась добавить влист активных переменных
***** проверить не изменилась ли переменая реалтайм метода
***** если изменилась добавить в лист активных реалтайм методов
**** Лист активных переменных
**** выполнять лист неких методов постоянно
**** мегать активным пунктом меню
**** управлять активностью ленты
** Подченить Тесты RPi ЛидМеню
** написаать класы для меню
** написаь меню
*** начальня инецелезация на основе инума
*** добовляем для каждого пункта команду екзект
** написать класс ленты
* Протеус схема проекта Точилки  
  Возможность симуляции
* Попробывть Переписатьт проект в Келли для СТМ32
** найти инструкцию\открыть
** установить келли
** установить плагины
*** вимиратор
*** вакотайм
** написать пробный проект 
** залить убедится что работает 
** Добавить тесты
** Начать переписоввать проект под кели 
  зета талк ненси
